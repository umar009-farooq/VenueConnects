name: Java CI with Maven and Docker

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ] # Runs on pushes to the main branch
  pull_request:
    branches: [ "main" ] # Runs on pull requests targeting the main branch

jobs:
  build:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner provided by GitHub

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin' # Use Eclipse Temurin JDK
          cache: maven # Enable caching for Maven dependencies

      # Step 3: Run Tests (including integration tests)
      # This step needs Docker running, which is available on GitHub runners
      # Testcontainers will automatically use the Docker environment
      - name: Run Tests with Maven
        run: mvn test

      # --- Docker Build and Push (Optional but Recommended) ---
      # This section builds the Docker image and pushes it to Docker Hub.
      # Replace 'your-dockerhub-username' with your actual Docker Hub username.
      # You'll need to configure secrets in your GitHub repository settings.

      # Step 4: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # Use GitHub secrets
          password: ${{ secrets.DOCKERHUB_TOKEN }}   # Use GitHub secrets

      # Step 5: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Use the current directory as build context
          push: true # Push the image after building
          tags: rusumumar09/venueconnect-app:latest # Replace with your username and image tag
