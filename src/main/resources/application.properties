# ----------------------------------------
# Server Configuration
# ----------------------------------------
server.port=8080

# ----------------------------------------
# Spring Datasource (PostgreSQL)
# ----------------------------------------
# Corresponds to the 'postgres-db' service in docker-compose.yml
spring.datasource.url=jdbc:postgresql://localhost:5432/venueconnect_db
spring.datasource.username=admin
spring.datasource.password=admin
spring.datasource.driver-class-name=org.postgresql.Driver

# ----------------------------------------
# JPA / Hibernate
# ----------------------------------------
# We use 'validate' because Flyway is handling the schema creation/update (DDL)
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true

# ----------------------------------------
# Flyway Database Migrations
# ----------------------------------------
# Flyway will automatically run migrations from 'src/main/resources/db/migration'
spring.flyway.enabled=true

# ----------------------------------------
# Redis (Cache & Locks)
# ----------------------------------------
# Corresponds to the 'redis-cache' service in docker-compose.yml
spring.data.redis.host=localhost
spring.data.redis.port=6379

# ----------------------------------------
# RabbitMQ (Async Tasks)
# ----------------------------------------
# Corresponds to the 'rabbitmq' service in docker-compose.yml
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# ----------------------------------------
# Kafka (Event Streaming)
# ----------------------------------------
# Corresponds to the 'kafka' service's advertised listener for localhost
spring.kafka.bootstrap-servers=localhost:29092

# ----------------------------------------
# OpenAPI / Swagger UI
# ----------------------------------------
# You will access the UI at http://localhost:8080/swagger-ui.html
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
# ----------------------------------------
# JWT Security Configuration
# ----------------------------------------
# Generate a secure key for production. This one is just for development.
application.security.jwt.secret-key=dGhpcyBpcyBhIHZlcnkgc2VjdXJlIGFuZCBsb25nIGJhc2U2NCBlbmNvZGVkIGtleSBmb3IgbXkgYXBwbGljYXRpb24K
# Token expiration time (e.g., 24 hours in milliseconds)
application.security.jwt.expiration=86400000
spring.profiles.active=dev
# Set reservation package to DEBUG to see listener logs
logging.level.com.venueconnect.reservation=DEBUG
# Optional: Set Redis listener logs to DEBUG too (helps see the raw event)
logging.level.org.springframework.data.redis.listener=DEBUG
# ----------------------------------------
# Kafka (Event Streaming)
# ----------------------------------------
# --- ADD PRODUCER CONFIGURATION ---
# Serializer for message keys (usually strings)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# Serializer for message values (we'll use JSON)
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# --- ADD CONSUMER CONFIGURATION ---
# Deserializer for message keys
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Deserializer for message values (use Spring's JSON deserializer)
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Tell the JSON deserializer which packages to trust for deserialization
spring.kafka.consumer.properties.spring.json.trusted.packages=com.venueconnect.kafka
# Optional but recommended: Tell JsonDeserializer to ignore type headers from producer if not needed
spring.kafka.consumer.properties.spring.json.use.type.headers=false
# Tell JsonDeserializer the default type if type info is missing (should match @Payload)
spring.kafka.consumer.properties.spring.json.value.default.type=com.venueconnect.kafka.OrderEventPayload